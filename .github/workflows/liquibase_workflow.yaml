# This is a basic workflow to help you get started with Actions

name: Liquibase

# Controls when the workflow will run
on: [push, pull_request]

env:
    APP_NAME: APP_ABC
    LIQUIBASE_COMMAND_CHANGELOG_FILE: db.changelog-main.yaml
    LIQUIBASE_COMMAND_TAG: ${{ github.run_number }}
###
### These values should be pulled from GitHub secrets
### Secrets should include LIQUIBASE_COMMAND_URL, LIQUIBASE_COMMAND_USERNAME, LIQUIBASE_COMMAND_PASSWORD, LIQUIBASE_LICENSE_KEY
###
    LIQUIBASE_COMMAND_URL: ${{ secrets.LIQUIBASE_COMMAND_URL }}
    LIQUIBASE_COMMAND_USERNAME: ${{ secrets.LIQUIBASE_COMMAND_USERNAME }}
    LIQUIBASE_COMMAND_PASSWORD: ${{ secrets.LIQUIBASE_COMMAND_PASSWORD }}
    LIQUIBASE_LICENSE_KEY: ${{ secrets.LIQUIBASE_LICENSE_KEY }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [ self-hosted, Linux ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Runs the build
      - name: Run Liquibase
        run: |
          echo "Running build for application $APP_NAME"  
          liquibase flow --flow-file=flows/liquibase.qc-exceptions.yaml
          liquibase flow --flow-file=flows/liquibase.flowfile.yaml
          
      - name: Create Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: liquibase_policy_exceptions
          path: |
            reports/*